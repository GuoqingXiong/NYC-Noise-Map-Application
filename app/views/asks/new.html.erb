<%= form_for(@ask, as: :ask) do |f| %>
    Search Noise Type/City Name: <%= f.text_field :query %>
    <%= f.submit "Search" %> <br>
<% end %>

<h2>There are total <%= @all_docs['hits']['hit'].length %> noise complaints.</h2>

<!DOCTYPE html>
<meta charset="utf-8">
<head>

  <style>
    body{
      width:1060px;
      margin:50px auto;
    }
    path {  stroke: #fff; }
    path:hover {  opacity:0.9; }
    rect:hover {  fill:blue; }
    .axis {  font: 10px sans-serif; }
    .legend tr{    border-bottom:1px solid grey; }
    .legend tr:first-child{    border-top:1px solid grey; }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .x.axis path {  display: none; }
    .legend{
      margin-bottom:76px;
      display:inline-block;
      border-collapse: collapse;
      border-spacing: 0px;
    }
    .legend td{
      padding:4px 5px;
      vertical-align:bottom;
    }
    .legendFreq, .legendPerc{
      align:right;
      width:50px;
    }

  </style>

  <script
  src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDY0kkJiTPVd2U7aTOAwhc9ySH6oHxOIYM&libraries=visualization&sensor=false">
  </script>

  <script>

    var twitters = [];
    var myCenter=[];
    var myText=[];



    var KMeans= [];
    KMeans[0]=[40.75308783,-73.93414523];
    KMeans[1]=[40.76042746,-73.833525];
    KMeans[2]=[40.72407217,-73.97866712];
    KMeans[3]=[40.68442958,-73.94089989];
    KMeans[4]=[40.63694007,-74.00805749];
    KMeans[5]=[440.82152285,-73.93934529];
    KMeans[6]=[40.74276545,-73.99779552];
    KMeans[7]=[40.68009671,-73.81887491];
    KMeans[8]=[40.85513528,-73.85518582];
    KMeans[9]=[40.85991453,-73.90920559];



//

    /*
     * Transfer Ruby hash to Javascript hash
     */
    <% @all_docs['hits']['hit'].each do |f| %>
    <% fields =  f['fields'] %>
    var field_hash = {};


      field_hash['latitude'] = "<%= fields['latitude'].to_s %>";
      field_hash['longitude'] = "<%= fields['longitude'].to_s %>";
      field_hash['text'] = "<%= fields['complaint_type'].to_s %>";

    if (field_hash['latitude'].length != 0 && field_hash['longitude'].length != 0)
      {twitters.push(field_hash);}
    <% end %>






    /*
     * Put tweets location and text into myCenter & myText.
     */
    for(var i in twitters){
      var lati = parseFloat(twitters[i].latitude);
      var lgti = parseFloat(twitters[i].longitude);

      myCenter[i]=new google.maps.LatLng(lati,lgti);
      myText[i]=twitters[i].text;
    }

    /*
     * Initialize Google Map with location and text.
     */


    var KmeansCenter=[];
    for(var i in KMeans){
      KmeansCenter[i]=new google.maps.LatLng(KMeans[i][0],KMeans[i][1]);
    }
    function initialize()
    {
      var newYork=new google.maps.LatLng(40.7141667,-74.0063889);
      var mapProp = {
        center:new google.maps.LatLng(40.7128,-74.0059),     // Set center to NYC 40.7128° N, 74.0059° W
        zoom:10,
        mapTypeId:google.maps.MapTypeId.ROADMAP
      };

      var map=new google.maps.Map(document.getElementById("googleMap"),mapProp);

      var heatmapData = [];
      heatmapData[0] = myCenter[0];
      var indexI=0;
      for (i = 0; i <300 ; i++) {
        heatmapData[indexI] = myCenter[i];
        indexI++;
      }
      for(var i in KmeansCenter){

        var cityCircle = new google.maps.Circle({
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#FF0000',
          fillOpacity: 0.35,
          map: map,
          center: KmeansCenter[i],
          radius: 1000
        });
      }



      var heatmap = new google.maps.visualization.HeatmapLayer({
        data: heatmapData
      });
      heatmap.setMap(map);



      google.maps.event.addListener(map, "click", function (event) {
        var clickLatitude = event.latLng.lat();
        var clickLongitude = event.latLng.lng();

        // Center of map
        var cityCircle = new google.maps.Circle({
          strokeColor: '#000000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#000000',
          fillOpacity: 0.35,
          map: map,
          center: new google.maps.LatLng(clickLatitude,clickLongitude),
          radius: 100
        });
        map.panTo(new google.maps.LatLng(clickLatitude,clickLongitude));
        var dist=0;
        for(var i in KMeans){
          dist=dist+1/((KMeans[i][0]-clickLatitude)*(KMeans[i][0]-clickLatitude)+(KMeans[i][1]-clickLongitude)*(KMeans[i][1]-clickLongitude));
        }
        dist=dist/10000;
        var heat="show";
        if(dist>0.4){
          heat="very noisy";
        }else if (dist>0.18){
          heat="noisy";
        }else {
          heat="quiet";
        }
        document.getElementById("demo1").innerHTML = clickLatitude;
        document.getElementById("demo2").innerHTML = clickLongitude;
        document.getElementById("demo3").innerHTML = dist;
        document.getElementById("demo4").innerHTML = heat;
      });



    }


    google.maps.event.addDomListener(window, 'load', initialize);


  </script>


  <div id='dashboard'>
  </div>
  <table border="1" >
    <tr>
      <td>Latitude</td>
      <td>Longitude</td>
      <td>noise statistics</td>
      <td>noise degree</td>
    </tr>
    <tr>
      <td id="demo1">show</td>
      <td id="demo2">show</td>
      <td id="demo3">show</td>
      <td id="demo4">show</td>
    </tr>
  </table>
</head>

<body>
<div id="googleMap" style="width:750px;height:570px;"></div>
</body>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
  function dashboard(id, fData){
    var barColor = 'steelblue';
    function segColor(c){ return {Residential:"#807dba", Commercial:"#e08214",Vehicle:"#41ab5d",Street:"#FF0000"}[c]; }

    // compute total for each airline.
    fData.forEach(function(d){d.total=d.freq.Residential+d.freq.Commercial+d.freq.Vehicle+d.freq.Street;});

    // function to handle histogram.
    function histoGram(fD){
      var hG={},    hGDim = {t: 60, r: 0, b: 30, l: 0};
      hGDim.w = 500 - hGDim.l - hGDim.r,
          hGDim.h = 300 - hGDim.t - hGDim.b;

      //create svg for histogram.
      var hGsvg = d3.select(id).append("svg")
          .attr("width", hGDim.w + hGDim.l + hGDim.r)
          .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
          .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

      // create function for x-axis mapping.
      var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
          .domain(fD.map(function(d) { return d[0]; }));

      // Add x-axis to the histogram svg.
      hGsvg.append("g").attr("class", "x axis")
          .attr("transform", "translate(0," + hGDim.h + ")")
          .call(d3.svg.axis().scale(x).orient("bottom"));

      // Create function for y-axis map.
      var y = d3.scale.linear().range([hGDim.h, 0])
          .domain([0, d3.max(fD, function(d) { return d[1]; })]);

      // Create bars for histogram to contain rectangles and freq labels.
      var bars = hGsvg.selectAll(".bar").data(fD).enter()
          .append("g").attr("class", "bar");

      //create the rectangles.
      bars.append("rect")
          .attr("x", function(d) { return x(d[0]); })
          .attr("y", function(d) { return y(d[1]); })
          .attr("width", x.rangeBand())
          .attr("height", function(d) { return hGDim.h - y(d[1]); })
          .attr('fill',barColor)
          .on("mouseover",mouseover)// mouseover is defined bepositive.
          .on("mouseout",mouseout);// mouseout is defined bepositive.

      //Create the frequency labels above the rectangles.
      bars.append("text").text(function(d){ return d3.format(",")(d[1])})
          .attr("x", function(d) { return x(d[0])+x.rangeBand()/2; })
          .attr("y", function(d) { return y(d[1])-5; })
          .attr("text-anchor", "middle");

      function mouseover(d){  // utility function to be called on mouseover.
        // filter for selected airline.
        var st = fData.filter(function(s){ return s.airline == d[0];})[0],
            nD = d3.keys(st.freq).map(function(s){ return {type:s, freq:st.freq[s]};});

        // call update functions of pie-chart and legend.
        pC.update(nD);
        leg.update(nD);
      }

      function mouseout(d){    // utility function to be called on mouseout.
        // reset the pie-chart and legend.
        pC.update(tF);
        leg.update(tF);
      }

      // create function to update the bars. This will be used by pie-chart.
      hG.update = function(nD, color){
        // update the domain of the y-axis map to reflect change in frequencies.
        y.domain([0, d3.max(nD, function(d) { return d[1]; })]);

        // Attach the new data to the bars.
        var bars = hGsvg.selectAll(".bar").data(nD);

        // transition the height and color of rectangles.
        bars.select("rect").transition().duration(500)
            .attr("y", function(d) {return y(d[1]); })
            .attr("height", function(d) { return hGDim.h - y(d[1]); })
            .attr("fill", color);

        // transition the frequency labels location and change value.
        bars.select("text").transition().duration(500)
            .text(function(d){ return d3.format(",")(d[1])})
            .attr("y", function(d) {return y(d[1])-5; });
      }
      return hG;
    }

    // function to handle pieChart.
    function pieChart(pD){
      var pC ={},    pieDim ={w:250, h: 250};
      pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

      // create svg for pie chart.
      var piesvg = d3.select(id).append("svg")
          .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
          .attr("transform", "translate("+pieDim.w/2+","+pieDim.h/2+")");

      // create function to draw the arcs of the pie slices.
      var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

      // create a function to compute the pie slice angles.
      var pie = d3.layout.pie().sort(null).value(function(d) { return d.freq; });

      // Draw the pie slices.
      piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
          .each(function(d) { this._current = d; })
          .style("fill", function(d) { return segColor(d.data.type); })
          .on("mouseover",mouseover).on("mouseout",mouseout);

      // create function to update pie-chart. This will be used by histogram.
      pC.update = function(nD){
        piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
            .attrTween("d", arcTween);
      }
      // Utility function to be called on mouseover a pie slice.
      function mouseover(d){
        // call the update function of histogram with new data.
        hG.update(fData.map(function(v){
          return [v.airline,v.freq[d.data.type]];}),segColor(d.data.type));
      }
      //Utility function to be called on mouseout a pie slice.
      function mouseout(d){
        // call the update function of histogram with all data.
        hG.update(fData.map(function(v){
          return [v.airline,v.total];}), barColor);
      }
      // Animating the pie-slice requiring a custom function which specifies
      // how the intermediate paths should be drawn.
      function arcTween(a) {
        var i = d3.interpolate(this._current, a);
        this._current = i(0);
        return function(t) { return arc(i(t));    };
      }
      return pC;
    }

    // function to handle legend.
    function legend(lD){
      var leg = {};

      // create table for legend.
      var legend = d3.select(id).append("table").attr('class','legend');

      // create one row per segment.
      var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

      // create the first column for each segment.
      tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
          .attr("width", '16').attr("height", '16')
          .attr("fill",function(d){ return segColor(d.type); });

      // create the second column for each segment.
      tr.append("td").text(function(d){ return d.type;});

      // create the third column for each segment.
      tr.append("td").attr("class",'legendFreq')
          .text(function(d){ return d3.format(",")(d.freq);});

      // create the fourth column for each segment.
      tr.append("td").attr("class",'legendPerc')
          .text(function(d){ return getLegend(d,lD);});

      // Utility function to be used to update the legend.
      leg.update = function(nD){
        // update the data attached to the row elements.
        var l = legend.select("tbody").selectAll("tr").data(nD);

        // update the frequencies.
        l.select(".legendFreq").text(function(d){ return d3.format(",")(d.freq);});

        // update the percentage column.
        l.select(".legendPerc").text(function(d){ return getLegend(d,nD);});
      }

      function getLegend(d,aD){ // Utility function to compute percentage.
        return d3.format("%")(d.freq/d3.sum(aD.map(function(v){ return v.freq; })));
      }

      return leg;
    }

    // calculate total frequency by segment for all airline.
    var tF = ['Residential','Commercial','Vehicle','Street'].map(function(d){
      return {type:d, freq: d3.sum(fData.map(function(t){ return t.freq[d];}))};
    });

    // calculate total frequency by airline for all segment.
    var sF = fData.map(function(d){return [d.airline,d.total];});

    var hG = histoGram(sF), // create the histogram.
        pC = pieChart(tF), // create the pie-chart.
        leg= legend(tF);  // create the legend.
  }
</script>

<script>

  var manhattanArr = <%=raw @manhattan %>;
  var brooklynArr = <%=raw @brooklyn %>;
  var bronxArr = <%=raw @bronx %>;
  var queensArr = <%=raw @queens %>;
  var statenArr = <%=raw @staten %>;


  var freqData=[
    {airline:'Manhattan',freq:{Residential:manhattanArr[0], Commercial:manhattanArr[1], Vehicle:manhattanArr[2],Street:manhattanArr[3]}}
    ,{airline:'Brooklyn',freq:{Residential:brooklynArr[0], Commercial:brooklynArr[1], Vehicle:brooklynArr[2],Street:brooklynArr[3]}}
    ,{airline:'Bronx',freq:{Residential:bronxArr[0], Commercial:bronxArr[1], Vehicle:bronxArr[2],Street:bronxArr[3]}}
    ,{airline:'Queens',freq:{Residential:queensArr[0], Commercial:queensArr[1], Vehicle:queensArr[2],Street:queensArr[3]}}
    ,{airline:'Staten Island',freq:{Residential:statenArr[0], Commercial:statenArr[1], Vehicle:statenArr[2],Street:statenArr[3]}}
  ];




  dashboard('#dashboard',freqData);
</script>

</html>